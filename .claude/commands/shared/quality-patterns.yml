# Quality Patterns & Validation
# Severity levels, validation sequences, and quality assurance patterns for SuperClaude

## Severity_Levels

```yaml
CRITICAL_10:
  Description: "Block Execution - System Safety"
  Risk_Level: "CRITICAL"
  Confidence_Override: "Force <60% confidence treatment"
  
  Triggers:
    Security_Violations:
      - "NEVER commit secrets|API keys|passwords"
      - "NEVER execute untrusted code|scripts"
      - "NEVER expose PII|sensitive data"
    
    Operational_Safety:
      - "NEVER force push to shared branches"
      - "NEVER delete without confirmed backups"
      - "NEVER skip essential validation steps"
    
    Research_Requirements:
      - "NEVER implement unfamiliar patterns without research"
      - "ALWAYS verify with official documentation"
      - "NEVER assume API compatibility without validation"
  
  Response_Pattern: "BLOCK → Express uncertainty → Request human guidance"
  Communication: "🚨 CRITICAL: This requires human approval before proceeding"

HIGH_7_9:
  Description: "Confidence Assessment Required"
  Risk_Level: "HIGH"
  Confidence_Treatment: "Apply full confidence framework"
  
  Triggers:
    Level_9_Security_Production:
      - "Implement security best practices with evidence"
      - "No debug code in production deployments"
      - "Performance claims backed by measurements"
    
    Level_8_Quality_Architecture:
      - "Comprehensive error handling patterns"
      - "Prevention of N+1 queries & performance antipatterns"
      - "Test coverage for critical paths"
      - "SOLID principles application with rationale"
    
    Level_7_Standards_Efficiency:
      - "Intelligent caching strategies with invalidation"
      - "Proper Git workflow & branching strategies"
      - "Task management with clear documentation"
      - "Context preservation across sessions"
  
  Response_Pattern: "ASSESS confidence → Apply appropriate interaction pattern"
  Communication: "⚠️ HIGH: Applying confidence assessment for this operation"

MEDIUM_4_6:
  Description: "Advisory Guidance"
  Risk_Level: "MEDIUM"
  Confidence_Treatment: "Standard confidence assessment"
  
  Triggers:
    Level_6_Code_Organization:
      - "DRY principles and module boundaries"
      - "Complex documentation requirements"
      - "Architectural pattern decisions"
    
    Level_5_Development_Practices:
      - "Naming conventions and standards"
      - "SOLID principles adherence"
      - "Comprehensive example provision"
    
    Level_4_Maintenance:
      - "Code formatting and style"
      - "Technical terminology consistency"
      - "File organization patterns"
  
  Response_Pattern: "ADVISE → Provide recommendations with reasoning"
  Communication: "ℹ️ MEDIUM: Recommendations for improvement available"

LOW_1_3:
  Description: "Best Practice Suggestions"
  Risk_Level: "LOW"
  Confidence_Treatment: "Minimal confidence impact"
  
  Triggers:
    Level_3_Documentation:
      - "Changelog maintenance standards"
      - "Algorithm optimization opportunities"
      - "Code documentation improvements"
    
    Level_2_Code_Quality:
      - "Example integration enhancements"
      - "Modern syntax adoption"
      - "Style consistency improvements"
    
    Level_1_Enhancement:
      - "Performance micro-optimizations"
      - "Stylistic improvements"
      - "Minor refactoring opportunities"
  
  Response_Pattern: "SUGGEST → Optional improvements when beneficial"
  Communication: "💡 LOW: Optional enhancements suggested"
```

## Validation_Sequence

```yaml
Pre_Execution_Gates:
  Security_Validation:
    Confidence_Requirement: "≥80% for security-related operations"
    Checks:
      - "Scan for hardcoded secrets and credentials"
      - "Validate input sanitization patterns"
      - "Verify authentication and authorization logic"
      - "Assess data privacy and protection measures"
    
    Risk_Override: "Security operations always require human validation"
    Pattern: "Security scan → Human review → Approval → Proceed"
  
  Quality_Assessment:
    Confidence_Integration: "Apply standard confidence calculation"
    Checks:
      - "Code style consistency with project standards"
      - "Error handling completeness and patterns"
      - "Test coverage adequacy for changes"
      - "Documentation presence and accuracy"
    
    Confidence_Adjustment:
      Complete_Quality: "+5% confidence bonus"
      Partial_Quality: "0% adjustment"
      Missing_Quality: "-10% confidence penalty"
  
  Risk_Assessment:
    Process:
      1. "Calculate base confidence using AI-Framework formula"
      2. "Apply persona expertise bonuses"
      3. "Check for risk override conditions"
      4. "Map confidence to SuperClaude risk levels"
      5. "Determine appropriate interaction pattern"
    
    Override_Conditions:
      - "Security operations → HIGH risk minimum"
      - "Production changes → MEDIUM risk minimum"
      - "Data operations → HIGH risk minimum"
      - "Irreversible actions → CRITICAL risk"

During_Execution_Gates:
  Progress_Validation:
    High_Confidence_Pattern:
      - "Document progress and decisions"
      - "Verify intermediate results"
      - "Monitor for unexpected complexity"
      - "Validate data integrity throughout"
    
    Medium_Confidence_Pattern:
      - "Seek validation at key decision points"
      - "Check intermediate results with human"
      - "Monitor resource usage and performance"
      - "Validate assumptions as work progresses"
    
    Low_Confidence_Pattern:
      - "Collaborate on each significant step"
      - "Get approval before major changes"
      - "Continuous validation and feedback"
      - "Joint problem-solving for obstacles"
  
  Quality_Maintenance:
    Continuous_Standards:
      - "Maintain code standards throughout"
      - "Preserve existing functionality"
      - "Document significant changes in real-time"
      - "Update relevant tests as changes are made"
    
    Confidence_Monitoring:
      - "Track confidence levels during work"
      - "Escalate interaction pattern if confidence drops"
      - "Reassess using chain-of-thought if complexity increases"
      - "Apply risk overrides if conditions change"

Post_Execution_Gates:
  Completion_Verification:
    Success_Criteria_Validation:
      - "Verify all requirements have been met"
      - "Check for unintended side effects"
      - "Validate performance impact measurements"
      - "Confirm security posture maintained"
    
    Quality_Confirmation:
      - "Code review against established standards"
      - "Test execution and coverage validation"
      - "Documentation accuracy and completeness"
      - "Integration testing where applicable"
  
  Learning_Integration:
    Confidence_Calibration:
      - "Compare predicted vs actual confidence accuracy"
      - "Update persona expertise assessments"
      - "Record successful pattern applications"
      - "Document failure modes and recoveries"
    
    Knowledge_Capture:
      - "Document successful approaches for reuse"
      - "Record lessons learned for future reference"
      - "Share insights across sessions and projects"
      - "Update risk assessment patterns based on outcomes"
```

## OWASP_Top_10

```yaml
Security_Pattern_Integration:
  A01_Broken_Access_Control:
    Detection_Pattern: "Check authorization before resource access"
    Prevention_Standard: "Implement least privilege, deny by default"
    Confidence_Impact: "Security expertise +10%, unauthorized access -15%"
    Risk_Override: "Always HIGH risk minimum for access control changes"
  
  A02_Cryptographic_Failures:
    Detection_Pattern: "Identify weak encryption, plaintext storage"
    Prevention_Standard: "Use strong algorithms, proper key management"
    Confidence_Impact: "Cryptographic expertise +10%, weak crypto -20%"
    Risk_Override: "Always HIGH risk minimum for cryptographic operations"
  
  A03_Injection:
    Detection_Pattern: "Look for unsanitized input usage"
    Prevention_Standard: "Parameterized queries, input validation"
    Confidence_Impact: "Database expertise +10%, injection risk -15%"
    Risk_Override: "Always MEDIUM risk minimum for database operations"
  
  A04_Insecure_Design:
    Detection_Pattern: "Review threat modeling, secure patterns"
    Prevention_Standard: "Security by design, defense in depth"
    Confidence_Impact: "Architecture expertise +10%, insecure design -20%"
    Risk_Override: "Always HIGH risk minimum for architecture changes"
  
  A05_Security_Misconfiguration:
    Detection_Pattern: "Check default configs, unnecessary features"
    Prevention_Standard: "Secure defaults, minimal attack surface"
    Confidence_Impact: "Configuration expertise +5%, misconfig -10%"
    Risk_Override: "Always MEDIUM risk minimum for configuration changes"

Validation_Levels:
  Level_1_Basic_Security:
    Scope: "Input validation, output encoding"
    Confidence_Bonus: "+5% for basic security practices"
    Requirements:
      - "Validate all external inputs"
      - "Encode outputs for display contexts"
      - "Use parameterized queries"
      - "Apply basic authentication checks"
  
  Level_2_Comprehensive_Security:
    Scope: "Authorization, session management, error handling"
    Confidence_Bonus: "+10% for comprehensive security"
    Requirements:
      - "Implement proper authorization patterns"
      - "Secure session management"
      - "Comprehensive error handling without information disclosure"
      - "Security logging and monitoring"
  
  Level_3_Production_Security:
    Scope: "Defense in depth, monitoring, incident response"
    Confidence_Bonus: "+15% for production-ready security"
    Requirements:
      - "Multiple layers of security controls"
      - "Real-time security monitoring"
      - "Incident response procedures"
      - "Regular security assessments"
  
  Level_4_Mission_Critical_Security:
    Scope: "Advanced threat protection, compliance"
    Confidence_Bonus: "+20% for mission-critical security"
    Requirements:
      - "Advanced persistent threat protection"
      - "Compliance with security frameworks"
      - "Continuous security validation"
      - "Threat intelligence integration"
```